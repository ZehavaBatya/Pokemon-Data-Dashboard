# -*- coding: utf-8 -*-
"""Pokemon_Dataset_Combined_Document.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NfAxB9-BFe1hLD9Y9ao8jgtBM7d9-S2G
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Bring in the pokemons! # Intro - Annaliese
Pokemon_master = pd.read_csv("/content/Pokemon Database.csv" , header=0, index_col= 'Pokemon Id')

Pokemon_master.head(5) # get the best starter pokemon!

# Just A General Descirbe Function to test it out.
Pokemon_master.describe()
Pokemon_master[["Pokedex Number",	"Pokemon Name", "Alternate Form Name", "Health Stat"]]

Pokemon_master[["Pokemon Name", "Alternate Form Name"]]  # Return all pokemon

# Returns the EV's of all pokemon
Pokemon_master[["Pokedex Number",	"Pokemon Name", "Alternate Form Name", "Health EV",	"Attack EV",	"Defense EV", "Special Defense EV", "Special Attack EV", "Speed EV", "EV Yield Total"]]

# Return the stats of all pokemon  - Annalease ends here
Pokemon_master[["Pokedex Number",	"Pokemon Name", "Alternate Form Name", "Health Stat",	"Attack Stat",	"Defense Stat", "Special Defense Stat", "Special Attack Stat","Speed Stat"]]

# Pokemons Main types to experince growth totals # Dylan take over here
plt.title("Pokemon's")


p1 = Pokemon_master.groupby('Primary Type')['Experience Growth Total'].mean()
p1.plot.bar(x='Primary Type', y='Experience Growth Total')

# Primary type of pokemon  to Happiness
plt.title("Type to the Pokemon's Happiness")


p1 = Pokemon_master.groupby('Primary Type')['Base Happiness'].mean()
p1.plot.bar(x='Sepceies Female Ratio', y='Base Happiness')

Find_Pichu = Pokemon_master[Pokemon_master['Pokemon Name'] == '"Pichu"']
Find_Pichu

# A function that allows you to grab specific pokemon
def Whose_that_Pokemon():
  pokemon_request = input('Put in a pokemons name Using "" around it. Example: "Pikachu" ')
  x = Pokemon_master[Pokemon_master['Pokemon Name'] == pokemon_request]
  return x
Whose_that_Pokemon()

# Allows you to get a pokemons that have ability = to the input
def Pokemon_Powers():
  pokemon_request = input('Put in a pokemons ability "" around it. Example: "Overgrow" ')
  x = Pokemon_master[(Pokemon_master['Primary Ability'] == pokemon_request) | (Pokemon_master['Secondary Ability'] == pokemon_request) |(Pokemon_master['Hidden Ability'] == pokemon_request) ]
  return x[['Pokemon Name','Primary Ability', 'Secondary Ability', 'Hidden Ability']]
Pokemon_Powers()

# Gives you a pokemon Based on type
def Type_Pokemon():
  pokemon_request = input('Put in a pokemons type using "" around it. Example: "Grass" ')
  x = Pokemon_master[(Pokemon_master['Primary Type'] == pokemon_request) | (Pokemon_master['Secondary Type'] == pokemon_request)]
  return x
Type_Pokemon()

# Base stats of pokemon with mega evolutions # Payton starts here
Megas = pd.read_csv("/content/Pokemon Database.csv" , header=0, index_col= 'Pokemon Id')
Megas = Megas[Megas["Alternate Form Name"] == '"Mega"']
Megas["Pokemon"] = Megas["Alternate Form Name"] + " " + Megas["Pokemon Name"]
Megas = Megas[["Pokemon", "Health Stat",    "Attack Stat",    "Defense Stat", "Special Defense Stat", "Special Attack Stat","Speed Stat", "Base Stat Total"]]
Megas

# Top 10 megas by base stat total
TopTen = Megas.sort_values("Base Stat Total", ascending=False).head(10)
TopTen
# Bar graph showing the 10 highest total base stats for mega pokemon
p1 = TopTen.groupby('Pokemon')['Base Stat Total'].mean().sort_values()
p1.plot.bar(x='Pokemon', y='Base Stat Total')

# Pokemons heights to pokemons weight
plt.title("Pokemon's")


p1 = Pokemon_master.groupby('Pokemon Height')['Pokemon Weight'].mean()
p1.plot(x='Pokemon Height', y='Pokemon Weight')

# Female Ratio to Catch rate #Meat Starts here
plt.title("Pokemon's")


p1 = Pokemon_master.groupby('Female Ratio')['Catch Rate'].mean()
p1.plot.bar(x='Female Ratio', y='Catch Rate')

# Male Ration to Catch rate
plt.title("Pokemon's")


p1 = Pokemon_master.groupby('Male Ratio')['Catch Rate'].mean()
p1.plot.bar(x='Male Ratio', y='Catch Rate')

# A Pokemon's Female Ratio to it's base Happiness
plt.title("Gender Ratio Pokemon's Happiness")


p1 = Pokemon_master.groupby('Female Ratio')['Base Happiness'].mean()
p1.plot.bar(x='Sepceies Female Ratio', y='Base Happiness')

# male Ratio to Happiness
plt.title("Gender Ratio Pokemon's Happiness")


p1 = Pokemon_master.groupby('Male Ratio')['Base Happiness'].mean()
p1.plot.bar(x='Sepceies male Ratio', y='Base Happiness')

# return all pokemon with EV at least 3 EVS in a stats
Evtotal = Pokemon_master.loc[Pokemon_master['EV Yield Total']== 3]
Evtotal[['Pokemon Name', 'EV Yield Total']].drop_duplicates()

# return all male and female pokemon
new = pd.DataFrame(Pokemon_master)
x = new[(new['Male Ratio'] == 100.00) | (new['Female Ratio'] == 100.00)]
x[['Pokemon Name','Male Ratio','Female Ratio']].drop_duplicates()